/*
  CREATED BY ANGEL ORELLANA

  ESTE ARCHIVO ES UNA LIBRERIA QUE IMPLEMENTA LA COMUNICACION CON IC TM1637 PARA MICROCONTROLADORES AVR
  HE DECIDIDO CREAR ESTA LIBRERIA DEBIDO A QUE CONSIDERO QUE ME SERA DE UTILIDAD EN EL FUTURO, TODO EL 
  PROTOCOLO NECESARIO SE ENCUETRA EN EL DATASHEET DEL IC TM1637 ASI COMO LOS COMANDOS, CONSULTAR PARA
  MAYOR INFORMACION. SE RECOMIENDA PARA EL CORRECTO FUNCIONAMIENTO QUE SI SE ESTAN UTILIZANDO LAS INTERRUPCIONES
  EN EL CASO DE ESTAR USANDO LOS REGISTROS R16, R17 Y R0, QUE SE GUARDE SU VALOR AL ENTRAR EN LA 
  INTERRRUPCION Y ASI PRESERVAR EL VALOR Y EVITAR QUE SE PIERDAN DATOS.
  
  ********************** HISTORY **************************************************
  7-12-2020: 
	SE CREO LA LIBRERIA, SE POR EL MOMENTO DE HA PROBADO EN UN ATTINY85 A UNA FRECUENCIA DE 1MHZ  SE
	DESCONOCE SI FUNCIONA BIEN A FRECUENCIAS SUPERIORES.
  
  LAS FUNCIONES QUE SE DEBEN UTILIZAR SON:
  
  TM_DECODE:
	CODIFICA LOS VALORES EN BINARIO DE 0 A 9 , A SU REPRESENTACION PARA 7 SEGMENTOS
  TM_DISPLAY_AUTO:
	ENVIA LAS INSTRUCCIONES PARA COLOCAR EL DISPLAY DE FORMA AUTOMATICA. 
  TM_INITIAL:
	INCIA LOS VALORES Y LOS PUERTOS, LAS VARIABLES VALX SE INICIAN CON 0
  
  TODAS LAS DEMAS RUTINAS CREADAS SON UNICAMENTE PARA USO INTERTNO
  
  IMPORTANTE SE DEBEN DE DEFINIR LOS PINES Y EL PUERTO UTILIZADO PARA ENVIAR LOS DATOS DE LA SIGUIENTE FORMA, ESTO ES
  PARA QUE EL CODIGO SEA LO MAS PORTABLE POSIBLE A OTROS MICROCONTROLADORES AVR

  .EQU TMDDR = DDRX ;PARA  PODER CONTROLAR 
  .EQU TMPORT = PORTX ;PARA CONTROLAR EL DATO ENVIADO
  .EQU TMDATA  = "PIN A  USAR" 
  .EQU TMCLK = "PIN A USAR COMO DATOS" 

  ADEMAS, SE DEBE DE COLOCAR LA TABLA EN LA MEMORIA DE PROGRAMA, DENTRO DEL PROGRAMA PRINCIPAL, ESTO ES PARA QUE NO EXISTAN
  CONFLICTOS AL MOMENTO DE INCLUIR LA LIBRERIA. SE ADJUNTA LA TABLA, NO SE DEBE DE CAMBIAR EL NOMBRE DE LA ETIQUETA.

  TM1637TABLE:.DB  0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f
	
	ESTA TABLA DE DEBE DE COLOCAR ANTES DE LAS PRIMRAS 245 POSICIONES DE MEMORIA PARA UN CORRECTO FUNCIONAMIENTO
  */
  
  ;-------------- VARIABLES USADAS ----------------------------------

 .DSEG
	TMSEG1: .BYTE 1 ;DIGITO 1 
	TMSEG2: .BYTE 1 ;DIGITO 2
	TMSEG3: .BYTE 1 ;DIGITO 3
	TMSEG4: .BYTE 1 ;DIGITO 4
	TMVAL1: .BYTE 1 ;VALOR A DECODIFICAR 1
	TMVAL2: .BYTE 1	;VALOR A DECODIFICAR 2
	TMVAL3: .BYTE 1	;VALOR A DECODIFICAR 2
	TMVAL4: .BYTE 1	;VALOR A DECODIFICAR 2
;------------ CONSTANTES -------------------------------------------
.EQU ADR_AUTO = 0x40 ;DIRECCIONAMIENTO AUTOMANTIOC ESCRITURA DE DATOS Y MODO NORMAL
.EQU DIR_INI = 0xC0 ;INICIA EN LA DIRECCION C0

.CSEG
  ;---------- FUNCIONES QUE DEBE EJECUTAR EL USUARIO ----------------
 TM_INITIAL:
	CLR	R16
	STS	TMVAL1, R16
	STS	TMVAL2, R16
	STS	TMVAL3, R16
	STS	TMVAL4, R16
	SBI	TMDDR, TMCLK
	SBI	TMDDR, TMDATA
	RET
TM_DECODE:
	;EN ESTA RUTINA SE DECODIFICAN LOS VALORES, ES NECESARIO ASEGURAR QUE LOS VALORES DE TMVALX SEAN ENTRE 0 Y 10 CON 10 SIGNIFICANDO APAGADO
	LDI ZH, HIGH(TM1637TABLE*2)
	LDI	ZL, LOW(TM1637TABLE*2)
	ADD	ZL, TMVAL1 ;SE ELIGE EL VALOR
	LPM	
	STS	SEG1, R0 ;SE GUARDA EL VALOR
	LDI ZH, HIGH(TM1637TABLE*2)
	LDI	ZL, LOW(TM1637TABLE*2)
	ADD	ZL, TMVAL2 ;SE ELIGE EL VALOR
	LPM	
	STS	SEG2, R0 ;SE GUARDA EL VALOR
	LDI ZH, HIGH(TM1637TABLE*2)
	LDI	ZL, LOW(TM1637TABLE*2)
	ADD	ZL, TMVAL3 ;SE ELIGE EL VALOR
	LPM	
	STS	SEG3, R0 ;SE GUARDA EL VALOR
	LDI ZH, HIGH(TM1637TABLE*2)
	LDI	ZL, LOW(TM1637TABLE*2)
	ADD	ZL, TMVAL4 ;SE ELIGE EL VALOR
	LPM	
	STS	SEG4, R0 ;SE GUARDA EL VALOR


TM_DISPLAY:
	;EN ESTA RUTINA SE ENVIA EL COMANDO, Y LOS DATOS NECESARIOS A MOSTRAR
	LDI R16, ADR_AUTO ;SE CARGA EL COMANDO PARA LA ESCRITURA
	RCALL TM_START
	RCALL TM_SEND
	RCALL TM_STOP

	LDI	 R16, DIR_INI ;DIRECCION INICIAL DE DATOS EN EL TN1637
	RCALL TM_START
	RCALL TM_SEND
	LDS	R16, SEG1
	RCALL TM_SEND
	LDS	R16, SEG2
	RCALL TM_SEND
	LDS	R16, SEG3
	RCALL TM_SEND
	LDS	R16, SEG4
	RCALL TM_SEND
	LDI	R16 , OXFF
	RCALL TM_SEND
	RCALL TM_SENDS
	RCALL	STOP ;FIN DE LOS DATOS

	;SE CONFIGURA EL BRILLO
	LDI	R16, 0x8A ;
	RCALL START
	RCALL SEND
	RCALL STOP
	RET ;SE DETIENE
  ;---------- FUNCIONES INTERNAS QUE NO DEBE EJECUTAR EL USUARIO------------
TM_START:
	SBI	TMPORT, TMCLK ;EJECUTA LA SECUENCIA DE INICIO DE LA COMUNICACION
	SBI	TMPORT, TMDATA
	CBI	TMPORT, TMDATA
	CBI	TMPORT, TMCLK
	RET
TM_STOP:
	CBI	TMPORT, TMCLK ;EJECUTA LA SECUENCIA DE PARADA DE COMUNICACION.
	CBI	TMPORT, TMDATA
	SBI	TMPORT, TMCLK
	SBI	TMPORT, TMDATA
	RET	

TM_SEND:
	;SE USARA EL REGISTRO R16 PARA ENVIAR LOS DATOS Y R17 COMO VALOR DE CONTADOR
	CLR	R17 ;SE COLOCA EN 0 EL VALOR DE R17
	TMCICLO: ;UN BUCLE QUE SE RECORRE 8 VECES PARA ENVIAR LOS DATOS
	CPI R17, 8
	BREQ WAIT_FOR_ACK ;SI R17 ES 8 SE VA A LA ETIQUETA INDICADA
	;------------- SIGUE AQUI SI NO HAN PASADO 8 BITS ------------
	CBI	TMPORT, TMCLK ;SE COLOCA EN 0
	SBRC R16, 0 ; SE SALTA LA INSTRUCCION SI EL BIT ES 0
	RJMP TMONE
	;-------- SI ES CERO SE EJECUTA AQUI -------------------------
	CBI	TMPORT, TMDATA
	RJMP TMCONTINUE
	
	TMONE: 
	SBI	TMPORT, TMDATA

	TMCONTINUE:
	;-------- AQUI SE HACEN LOS PREPARATIVOS PARA EL SIGUIENTE BIT------
	SBI	TMPORT, TMCLK ;SE COLOCA EN 1 EL RELOJ 
	LSR	R16 ;SHIFT LOGICO A LA DERECHA
	INC R17 ;SE INCREMENTA 
	NOP
	NOP
	RJMP TMCICL0 ;CONTINUA CON EL SIGUIENTE BIT
	WAIT_FOR_ACK:
	CBI	TMPORT, TMCLK
	CBI TMDDR, TMDATA ;SE COLOCA COMO ENTRADA
	SBI	TMPORT, TMCLK ;NOVENO CICLO DE RELOJ
	NOP
	NOP;SE ESPERA POR LA SNIAL DE RESPUESTA 
	SBI	TMDDR, TMDATA ;SE COLOCA COMO ENTRADA DE NUEVO
	CBI	TMPORT, TMDATA ;SE COLOCA EN CERO
	RET ;FIN DEL ENVIO DE DATOS
	
